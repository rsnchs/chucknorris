plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.2'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.ronaldosanches.chucknorrisapimvvm"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.ronaldosanches.chucknorrisapitmvvm.CustomTestRunner"
    }

    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/sharedTest"
            resources.srcDirs += "$projectDir/src/sharedTest/resources"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/sharedTest"
            resources.srcDirs += "$projectDir/src/sharedTest/resources"
        }
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {

        kotlinOptions.freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi"]
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            testCoverageEnabled = true
        }
    }

    testOptions.unitTests.all {
        jacoco {
            includeNoLocationClasses = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

task jacocoTestReport { self ->
    build.dependsOn self
}

android.testVariants.all {
    def variant = it.testedVariant
    def name = variant.name.capitalize()

    tasks.create(name: "jacoco${name}TestReport", type: JacocoReport) { self ->
        group = 'Reporting'
        description = "Generates Jacoco coverage reports on the ${variant.name} variant"

        reports {
            xml.enabled = true
            html.enabled = true
        }

        getSourceDirectories().setFrom(files(variant.sourceSets.collectMany({ it.java.source })))
        getClassDirectories().setFrom(fileTree(dir: buildDir, includes: [
                "intermediates/classes/${variant.name}/**",
                "tmp/kotlin-classes/${variant.name}/**"
        ], excludes: [
                'android/**/*.*',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                '**/*Module.*', // modules for Dagger.
                '**/*Module$Companion.*', // modules for Dagger+Kotlin.
                '**/*Dagger*.*', // Dagger auto-generated code.
                '**/*MembersInjector*.*', // Dagger auto-generated code.
                '**/*_Provide*Factory*.*',
                '**/*_Factory.*', // Dagger auto-generated code
        ]))
        getExecutionData().setFrom(fileTree(dir: buildDir, includes: [
                "jacoco/test${name}UnitTest.exec",
                'outputs/code-coverage/connected/*coverage.ec'
        ]))

        doLast {
            println "Wrote HTML coverage report to ${reports.html.destination}/index.html"
            println "Wrote XML coverage report to ${reports.xml.destination}"
        }

        dependsOn "test${name}UnitTest", "create${name}CoverageReport"
        jacocoTestReport.dependsOn self
    }

}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.fragment:fragment-ktx:$frag_version"
    implementation "com.google.android.material:material:$google_material_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    //navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    //okhttp3
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

    //moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    //room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.legacy:legacy-support-v4:$androidx_legacy_version"
    kapt "androidx.room:room-compiler:$room_version"

    //facebook shimmer
    implementation "com.facebook.shimmer:shimmer:$shimmer_version"

    //dagger hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_viewmodel_version"
    // When using Kotlin.
    kapt "androidx.hilt:hilt-compiler:$hilt_viewmodel_version"

    //unit testing
    testImplementation 'junit:junit:4.13.2'
    //mockito
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp3_version"
    testImplementation "androidx.arch.core:core-testing:$test_core_testing_version"

    //instrumented testing
    //core test
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'com.google.truth:truth:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    //hilt test
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    //frag test
    debugImplementation "androidx.fragment:fragment-testing:$frag_version"
    //mockito
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.25.1'
    //coroutines test
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    //espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
}